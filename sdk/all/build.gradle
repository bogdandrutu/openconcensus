plugins {
    id "java-library"
    id "maven-publish"

    id "me.champeau.gradle.jmh"
    id "ru.vyarus.animalsniffer"
}

description = 'OpenTelemetry SDK'
ext.moduleName = "io.opentelemetry.sdk"
ext.propertiesDir = "build/generated/properties/io/opentelemetry/sdk"

// Stop gap measure until sdk no longer depends on sdk-metrics
configurations.all {
    resolutionStrategy {
        dependencySubstitution {
            substitute project(':opentelemetry-sdk-metrics') with module('io.opentelemetry:opentelemetry-sdk-metrics:0.13.0-alpha')
        }
    }
}

dependencies {
    api project(':opentelemetry-api'),
            project(':opentelemetry-sdk-common'),
            project(':opentelemetry-sdk-metrics'),
            project(':opentelemetry-sdk-trace')

    annotationProcessor libraries.auto_value

    testAnnotationProcessor libraries.auto_value
    testCompileOnly libraries.auto_value_annotation

    testImplementation project(':opentelemetry-sdk-testing')
    testImplementation libraries.junit_pioneer

    jmh(project(':opentelemetry-sdk-testing')) {
        // JMH doesn't handle dependencies that are duplicated between the main and jmh
        // configurations properly, but luckily here it's simple enough to just exclude transitive
        // dependencies.
        transitive = false
    }
    jmh(project(':opentelemetry-exporter-otlp-trace')) {
        // The opentelemetry-exporter-otlp-trace depends on this project itself. So don't pull in
        // the transitive dependencies.
        transitive = false
    }
    // explicitly adding the opentelemetry-exporter-otlp dependencies
    jmh(project(':opentelemetry-sdk-extension-otproto')) { transitive = false }
    jmh(project(':opentelemetry-proto'))
    jmh("io.grpc:grpc-api")
    jmh("io.grpc:grpc-netty-shaded")
    jmh("org.testcontainers:testcontainers:1.15.0") // testContainer for OTLP collector

    jmh libraries.guava

    signature libraries.android_signature
}

sourceSets {
    main {
        output.dir("build/generated/properties", builtBy: 'generateVersionResource')
    }
}

animalsniffer {
    // Don't check sourceSets.jmh and sourceSets.test
    sourceSets = [
            sourceSets.main
    ]
}

task generateVersionResource {
    doLast {
        def folder = file(propertiesDir)
        folder.mkdirs()
        def propertiesFile = new File(folder.getAbsolutePath(), "version.properties")
        propertiesFile.write("sdk.version=${project.version}")
    }
}