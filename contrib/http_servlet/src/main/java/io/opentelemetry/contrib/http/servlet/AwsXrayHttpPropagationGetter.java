/*
 * Copyright 2019, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.opentelemetry.contrib.http.servlet;

import static com.google.common.base.Strings.isNullOrEmpty;
import static com.google.common.base.Strings.lenientFormat;
import static com.google.common.base.Strings.padStart;

import com.google.common.base.Splitter;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.annotation.Nullable;
import javax.servlet.http.HttpServletRequest;

/** Extracts AWS X-Ray header values. */
public class AwsXrayHttpPropagationGetter extends BaseSchemeSpecificHttpPropagationGetter {

  /** Unique id of this scheme-specific getter. */
  public static final String SCHEME_NAME = "awsXRay";
  /** AWS X-Ray tracing id header generated by API Gateway and ALBs. */
  public static final String XAMZNTRACEID = "X-Amzn-Trace-Id";
  /** AWS request id header generated by API Gateway and CloudFront. */
  public static final String XAMZNREQUESTID = "x-amzn-RequestId";
  /** Tracestate key for AWS request id. */
  public static final String AMZNREQUESTIDKEY = "amznReqId";

  private static final String XRAY_PREFIX_ROOT = "Root=";
  private static final String XRAY_PREFIX_PARENT = "Parent=";
  private static final String XRAY_PREFIX_SAMPLED = "Sampled=";
  private static final String XRAY_PREFIX_SELF = "Self=";
  private static final String XRAY_SAMPLED_VAL = "1";
  private static final Pattern REGEX_TRACEID =
      Pattern.compile("^1-([0-9a-f]{8})-([0-9a-f]{23,24})$");
  private static final Pattern REGEX_SEGMENTID = Pattern.compile("^[0-9a-f]{16}$");
  private static final Pattern REGEX_REQUESTID = Pattern.compile("^[A-Za-z0-9+/=-]{16,128}$");
  private static final String XRAY_DEFAULT_SPAN = "0000000000000004";
  private static final String TRACE_FLAGS_DEFAULT = "00";
  private static final String TRACE_FLAGS_SAMPLED = "01";
  private static final String W3C_VERSION = "00";
  private static final char W3C_SEPARATOR = '-';
  private static final Logger LOGGER =
      Logger.getLogger(AwsXrayHttpPropagationGetter.class.getName());

  /** Constructs a getter object. */
  public AwsXrayHttpPropagationGetter() {
    super(SCHEME_NAME);
  }

  @Override
  public boolean canProvideValues(HttpServletRequest request) {
    return request.getHeader(XAMZNTRACEID) != null;
  }

  @Nullable
  @Override
  protected String extractAndConstructTraceparentHeaderValue(HttpServletRequest request) {
    String xraytraceid = request.getHeader(XAMZNTRACEID);
    if (isNullOrEmpty(xraytraceid)) {
      return null;
    }
    String traceId = null;
    String spanId = null;
    String spanIdFromSelf = null;
    String traceFlags = TRACE_FLAGS_DEFAULT;
    List<String> parts = Splitter.on(';').splitToList(xraytraceid);
    for (String part : parts) {
      if (part.startsWith(XRAY_PREFIX_ROOT)) {
        traceId =
            convertRoot2TraceId(part.substring(XRAY_PREFIX_ROOT.length()).toLowerCase().trim());
      } else if (part.startsWith(XRAY_PREFIX_PARENT)) {
        spanId =
            convertParent2SpanId(part.substring(XRAY_PREFIX_PARENT.length()).toLowerCase().trim());
      } else if (part.startsWith(XRAY_PREFIX_SELF)) {
        spanIdFromSelf =
            convertSelf2SpanId(part.substring(XRAY_PREFIX_SELF.length()).toLowerCase().trim());
      } else if (part.startsWith(XRAY_PREFIX_SAMPLED)) {
        traceFlags =
            convertSampled2TraceFlags(
                part.substring(XRAY_PREFIX_SAMPLED.length()).toLowerCase().trim());
      }
    }
    if (traceId == null) {
      LOGGER.log(Level.WARNING, lenientFormat("Invalid AWS X-Ray Trace Id: %s", xraytraceid));
      return null;
    }
    if (spanId == null) {
      if (spanIdFromSelf == null) {
        spanId = XRAY_DEFAULT_SPAN;
      } else {
        spanId = spanIdFromSelf;
      }
    }
    return new StringBuilder()
        .append(W3C_VERSION)
        .append(W3C_SEPARATOR)
        .append(traceId)
        .append(W3C_SEPARATOR)
        .append(spanId)
        .append(W3C_SEPARATOR)
        .append(traceFlags)
        .toString();
  }

  @Nullable
  @Override
  protected String extractAndConstructTracestateHeaderValue(HttpServletRequest request) {
    String awsRequestId = request.getHeader(XAMZNREQUESTID);
    if (isNullOrEmpty(awsRequestId)) {
      return null;
    }
    Matcher matcher = REGEX_REQUESTID.matcher(awsRequestId);
    if (!matcher.find()) {
      return null;
    }
    return new StringBuilder()
        .append(AMZNREQUESTIDKEY)
        .append('=')
        .append(awsRequestId.toLowerCase())
        .toString();
  }

  @Nullable
  private static String convertRoot2TraceId(String amznId) {
    Matcher matcher = REGEX_TRACEID.matcher(amznId);
    if (!matcher.find()) {
      LOGGER.log(Level.WARNING, lenientFormat("Invalid AWS X-Ray Trace ID: %s", amznId));
      return null;
    }
    return matcher.group(1) + padStart(matcher.group(2), 24, '0');
  }

  @Nullable
  private static String convertParent2SpanId(String amznId) {
    Matcher matcher = REGEX_SEGMENTID.matcher(amznId);
    if (!matcher.find()) {
      LOGGER.log(Level.WARNING, lenientFormat("Invalid AWS X-Ray Segment ID: %s", amznId));
      return null;
    }
    return amznId;
  }

  @Nullable
  private static String convertSelf2SpanId(String amznId) {
    Matcher matcher = REGEX_TRACEID.matcher(amznId);
    if (!matcher.find()) {
      LOGGER.log(Level.WARNING, lenientFormat("Invalid AWS X-Ray Trace ID: %s", amznId));
      return null;
    }
    return matcher.group(2).substring(0, 16);
  }

  private static String convertSampled2TraceFlags(String amznId) {
    return XRAY_SAMPLED_VAL.equals(amznId) ? TRACE_FLAGS_SAMPLED : TRACE_FLAGS_DEFAULT;
  }
}
