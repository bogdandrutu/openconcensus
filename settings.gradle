pluginManagement {
    plugins {
        id "com.diffplug.spotless" version "5.9.0"
        id "com.github.ben-manes.versions" version "0.36.0"
        id "com.google.protobuf" version "0.8.14"
        id "de.marcphilipp.nexus-publish" version "0.4.0"
        id "de.undercouch.download" version "4.1.1"
        id "io.codearte.nexus-staging" version "0.22.0"
        id "io.morethan.jmhreport" version "0.9.0"
        id "me.champeau.gradle.jmh" version "0.5.2"
        id "nebula.release" version "15.3.0"
        id "net.ltgt.errorprone" version "1.3.0"
        id "org.jetbrains.kotlin.jvm" version "1.4.21"
        id "org.unbroken-dome.test-sets" version "3.0.1"
        id "ru.vyarus.animalsniffer" version "1.5.2"
    }

    repositories {
        gradlePluginPortal()
        google()
    }
}

plugins {
    id "com.gradle.enterprise" version "3.5"
}

dependencyResolutionManagement {
    repositories {
        mavenCentral()
        jcenter()
        mavenLocal()
    }
}

rootProject.name = "opentelemetry-java"
include ":all",
        ":api:all",
        ":api:context",
        ":api:metrics",
        ":semconv",
        ":bom",
        ":dependencyManagement",
        ":extensions:annotations",
        ":extensions:kotlin",
        ":extensions:trace-propagators",
        ":exporters:jaeger",
        ":exporters:jaeger-thrift",
        ":exporters:logging",
        ":exporters:logging-otlp",
        ":exporters:otlp:all",
        ":exporters:otlp:metrics",
        ":exporters:otlp:trace",
        ":exporters:prometheus",
        ":exporters:zipkin",
        ":integration-tests",
        ":integration-tests:tracecontext",
        ":opencensus-shim",
        ":opentracing-shim",
        ":perf-harness",
        ":proto",
        ":sdk:all",
        ":sdk:common",
        ":sdk:metrics",
        ":sdk:testing",
        ":sdk:trace",
        ":sdk-extensions:async-processor",
        ":sdk-extensions:autoconfigure",
        ":sdk-extensions:aws",
        ":sdk-extensions:logging",
        ":sdk-extensions:otproto",
        ":sdk-extensions:resources",
        ":sdk-extensions:tracing-incubator",
        ":sdk-extensions:jaeger-remote-sampler",
        ":sdk-extensions:jfr-events",
        ":sdk-extensions:zpages"

def isCI = System.getenv("CI") != null
gradleEnterprise {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'

        if (isCI) {
            publishAlways()
            tag 'CI'
        }
    }
}