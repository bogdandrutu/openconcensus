pluginManagement {
    plugins {
        id "com.diffplug.spotless" version "5.8.2"
        id "com.github.ben-manes.versions" version "0.36.0"
        id "com.google.protobuf" version "0.8.14"
        id "com.jfrog.artifactory" version "4.18.0"
        id "com.jfrog.bintray" version "1.8.5"
        id "de.undercouch.download" version "4.1.1"
        id "io.morethan.jmhreport" version "0.9.0"
        id "me.champeau.gradle.jmh" version "0.5.2"
        id "nebula.release" version "15.3.0"
        id "net.ltgt.errorprone" version "1.3.0"
        id "org.jetbrains.kotlin.jvm" version "1.4.20"
        id "org.unbroken-dome.test-sets" version "3.0.1"
        id "ru.vyarus.animalsniffer" version "1.5.2"
    }

    repositories {
        gradlePluginPortal()
        google()
    }
}

plugins {
    id "com.gradle.enterprise" version "3.5"
}

rootProject.name = "opentelemetry-java"
include ":opentelemetry-all",
        ":opentelemetry-api",
        ":opentelemetry-api-baggage",
        ":opentelemetry-api-common",
        ":opentelemetry-api-trace",
        ":opentelemetry-api-metrics",
        ":opentelemetry-context",
        ":opentelemetry-extension-annotations",
        ":opentelemetry-extension-kotlin",
        ":opentelemetry-extension-trace-propagators",
        ":opentelemetry-exporter-jaeger",
        ":opentelemetry-exporter-jaeger-thrift",
        ":opentelemetry-exporter-logging",
        ":opentelemetry-exporter-otlp",
        ":opentelemetry-exporter-otlp-metrics",
        ":opentelemetry-exporter-otlp-trace",
        ":opentelemetry-exporter-prometheus",
        ":opentelemetry-exporter-zipkin",
        ":opentelemetry-integration-tests",
        ":opentelemetry-integration-tests-tracecontext",
        ":opentelemetry-opencensus-shim",
        ":opentelemetry-opentracing-shim",
        ":opentelemetry-proto",
        ":opentelemetry-sdk-common",
        ":opentelemetry-sdk-metrics",
        ":opentelemetry-sdk-trace",
        ":opentelemetry-sdk",
        ":opentelemetry-sdk-extension-async-processor",
        ":opentelemetry-sdk-extension-aws",
        ":opentelemetry-sdk-extension-logging",
        ":opentelemetry-sdk-extension-otproto",
        ":opentelemetry-sdk-extension-resources",
        ":opentelemetry-sdk-extension-tracing-incubator",
        ":opentelemetry-sdk-extension-jaeger-remote-sampler",
        ":opentelemetry-sdk-extension-jfr-events",
        ":opentelemetry-sdk-extension-zpages",
        ":opentelemetry-sdk-testing",
        ":opentelemetry-bom",
        ":opentelemetry-perf-harness"

rootProject.children.each {
    it.projectDir = "$rootDir/" + it.name
            .replace("opentelemetry-api-", "api/")
            .replace("opentelemetry-integration-tests-", "integration-tests/")
            .replace("opentelemetry-exporter-otlp-", "exporters/otlp/")
            .replace("opentelemetry-exporter-", "exporters/")
            .replace("opentelemetry-extension-", "extensions/")
            .replace("opentelemetry-sdk-extension-", "sdk-extensions/")
            .replace("opentelemetry-sdk-", "sdk/")
            .replace("logging-", "logging/")
            .replace("opentelemetry-", "") as File
}

project(":opentelemetry-api").projectDir = "$rootDir/api/all" as File
project(":opentelemetry-context").projectDir = "$rootDir/api/context" as File
project(":opentelemetry-exporter-otlp").projectDir = "$rootDir/exporters/otlp/all" as File
project(":opentelemetry-sdk").projectDir = "$rootDir/sdk/all" as File

def isCI = System.getenv("CI") != null
gradleEnterprise {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'

        if (isCI) {
            publishAlways()
            tag 'CI'
        }
    }
}