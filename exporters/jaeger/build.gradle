plugins {
    id "java-library"
    id "maven-publish"

    id "com.google.protobuf"
    id "ru.vyarus.animalsniffer"
}

description = 'OpenTelemetry - Jaeger Exporter'
ext.moduleName = "io.opentelemetry.exporter.jaeger"

dependencies {
    api project(':sdk:all'),
            libraries.grpc_api

    implementation project(':sdk-extensions:otproto'),
            project(':sdk:all'),
            libraries.grpc_protobuf,
            libraries.grpc_stub,
            libraries.protobuf,
            libraries.protobuf_util

    testImplementation "io.grpc:grpc-testing:${grpcVersion}",
            'com.fasterxml.jackson.core:jackson-databind',
            libraries.testcontainers,
            libraries.okhttp

    testImplementation project(':sdk:testing')

    // Protobuf plugin seems to erroneously use the non-classpath configurations for resolving
    // dependencies.
    boms.each {
        testImplementation enforcedPlatform(it)
    }

    testRuntime "io.grpc:grpc-netty-shaded:${grpcVersion}"

    signature libraries.android_signature
}

animalsniffer {
    // Don't check sourceSets.jmh and sourceSets.test
    sourceSets = [
            sourceSets.main
    ]
}

protobuf {
    protoc {
        // The artifact spec for the Protobuf Compiler
        artifact = "com.google.protobuf:protoc:${protocVersion}"
    }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

// IntelliJ complains that the generated classes are not found, ask IntelliJ to include the
// generated Java directories as source folders.
idea {
    module {
        sourceDirs += file("build/generated/source/proto/main/java")
        // If you have additional sourceSets and/or codegen plugins, add all of them
    }
}
