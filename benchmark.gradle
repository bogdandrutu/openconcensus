sourceSets {
    jmh {
	java.srcDir 'src/jmh/java'
	resources.srcDir 'src/jmh/resources'
	compileClasspath += main.output
	runtimeClasspath += main.output
    }
}

def benchmarksAvailable = sourceSets.jmh.java.getFiles().any { f -> f.exists() }

dependencies {
    jmhCompile 'org.openjdk.jmh:jmh-core:1.23'
    jmhAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.23'
}

configurations {
    jmhCompile {
	extendsFrom compile
    }

    jmhImplementation {
	extendsFrom implementation
	extendsFrom jmhCompile
    }

    jmh {
	extendsFrom runtime
	extendsFrom jmhCompile
    }
}

compileJmhJava {
    enabled benchmarksAvailable
    options.compilerArgs = compileJava.options.compilerArgs
    options.fork = compileJava.options.fork
    options.forkOptions = compileJava.options.forkOptions
}

task jmhRun(type: JavaExec) {
    enabled benchmarksAvailable
    description 'Run JMH benchmarks. Use property jmhFilter to set benchmark filtering regex.'
    group 'Verification'
    classpath = sourceSets.jmh.runtimeClasspath
    main = 'org.openjdk.jmh.Main'
    // Allows users to filter JMH benchmark using a regex
    args project.findProperty("jmhFilter") ?: ''
}

task jmhJar(type: Jar) {
    dependsOn = ['compileJmhJava']

    enabled benchmarksAvailable
    description 'Generate executable JMH benchmark JAR, if any benchmarks exists.'
    group 'Build'
    classifier "jmh"
    doFirst {
	manifest {
	    attributes('Main-Class': 'org.openjdk.jmh.Main', 'Class-Path': ([jar.archiveName] + configurations.runtimeClasspath.files.collect { it.getName() }).join(' '))
	}
    }
    from {
	// Only include JMH benchmarks and JMH in Jar file
	(configurations.jmhRuntimeClasspath.files - configurations.runtimeClasspath.files).collect { it.isDirectory() ? it : zipTree(it) }
    } {
	exclude 'META-INF/*.SF'
	exclude 'META-INF/*.DSA'
	exclude 'META-INF/*.RSA'
	exclude 'log4j.properties'
    }
    from sourceSets.jmh.output
}

artifacts {
    if (benchmarksAvailable) {
	archives jmhJar
    }
}

publishing {
    publications {
	mavenJava(MavenPublication) {
	    if (benchmarksAvailable) {
		artifact jmhJar {
		    classifier "jmh"
		}
	    }
	}
    }
}
